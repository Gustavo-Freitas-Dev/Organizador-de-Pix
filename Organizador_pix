import flet as ft
import re

def tratar_dados(e, origem_field, dados_tratados):
    dados_tratados.value = ''
    dados_tratados.update()
    
    textos = origem_field.value.split('\n')  # Divide o texto com base nas quebras de linha

    bancos = [
        "Bradesco", "Brasil", "Itaú", "Itau", "CEF", "Nubank", "Santander", "Basa", 
        "Banco do Brasil", "Banco Safra", "Caixa Econômica", "Banrisul", "Banestes", 
        "Banco Original", "BTG", "XP Investimentos", "Neon", "C6 Bank", "XP", "C6",
        "Caixa Economica", "PIX", "Sicredi", r"C6 \(336\)", "Stone"
    ]
    
    bancos_regex = "|".join(bancos)

    padrao = re.compile(
        rf"(?P<banco>{bancos_regex})\s*(?:\(\d+\))?\s*"  # Captura o nome do banco
        r"(?P<nome>[A-Za-zÀ-ÖØ-öø-ÿ\s.\-]+?)\s+PIX\s+"  # Captura o nome da pessoa, ignorando a palavra PIX
        r"(?:CPF\s*(?P<cpf>[\d.\-]+)|" 
        r"Email\s*(?P<email>[\w.\-]+@[\w.\-]+)|"
        r"Fone\s*(?P<fone>\+?[\d\s()\-]+))?\s+"  # Captura CPF, e-mail ou telefone como chave Pix
        r"(?:AG\s*(?P<agencia>[\d\-A-Za-z]+))?\s*"
        r"(?:C[\/\s]?(?:C|POUP|C/C|CC|CPOUP|CNPJ)\s*(?P<conta>[\w.\-]+))?\s*"
        r"R\$\s*(?P<valor>\d{1,3}(?:[\.,]\d{3})*[\.,]\d{2})",
        flags=re.IGNORECASE
    )

    resultados = []
    total_valor = 0.0
    total_contas = 0

    for texto in textos:
        for match in padrao.finditer(texto):
            dados = match.groupdict()
            banco = dados['banco'] or 'Não informado'
            chave_pix = dados.get('cpf') or dados.get('email') or dados.get('fone') or 'Não informado'
            agencia = dados.get('agencia', 'Não informada')
            conta = dados.get('conta', 'Não informada')
            valor_texto = dados.get('valor', '0,00').replace('.', '').replace(',', '.')

            try:
                valor = float(valor_texto)
                total_valor += valor
                valor_formatado = f"R$ {valor:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
            except ValueError:
                valor_formatado = 'Valor inválido'

            resultado = (
                f"Banco: {banco}\n"
                f"Nome: {dados['nome'].strip()}\n"
                f"Chave Pix: {chave_pix}\n"
                f"Agência: {agencia}\n"
                f"Conta: {conta}\n"
                f"Valor: {valor_formatado}\n"
                f"{'-'*40}\n"
            )
            resultados.append(resultado)
            total_contas += 1

    valor_total_formatado = f"R$ {total_valor:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
    
    if resultados:
        dados_tratados.value = "\n".join(resultados) + f"\nTotal de transações: {total_contas}\nTotal em valor: {valor_total_formatado}\n"
    else:
        dados_tratados.value = "Nenhuma transação válida encontrada."

    dados_tratados.update()
    
# Função para limpar os dados (limpa os campos de texto)
def limpar_dados(e, origem_field, dados_tratados):
    origem_field.value = ""  # Limpa o campo de origem
    dados_tratados.value = ""  # Limpa o campo de dados tratados
    origem_field.update()  # Atualiza o campo origem
    dados_tratados.update()  # Atualiza o campo de dados tratados

# Função para a interface do usuário
def main(page: ft.Page):
    global origem_field, dados_tratados

    # Função para copiar os dados tratados para a área de transferência
    def copiar_para_area_de_transferencia(e):
        page.set_clipboard(dados_tratados.value)  # Copia os dados para a área de transferência
        page.open(ft.SnackBar(ft.Text("Dados copiados com sucesso!"), duration=2000))  # Exibe uma notificação
        page.update()

    # Configuração inicial da página
    page.window.width = 800
    page.window.height = 700
    page.theme_mode = ft.ThemeMode.LIGHT  # Tema claro
    page.padding = 30
    page.window.resizable = False  # Não permite redimensionamento
    page.title = 'Pix Organiza'  # Título da página

    # Definição dos campos de texto
    origem_field = ft.TextField(
        label="Digite os dados a serem tratados",
        width=680,
        bgcolor=ft.colors.GREY_100,
        border_radius=20,
        focused_border_color='2196F3',
        expand=True
    )

    dados_tratados = ft.TextField(
        label="Dados tratados",
        multiline=True,
        expand=True,
        bgcolor=ft.colors.GREY_100,
        border_radius=20,
        focused_border_color="#2196F3",
        disabled=False,
        read_only=True,
    )

    # Botões de ação
    btn_copiar_dados = ft.TextButton(
        text='Copiar Dados',
        icon=ft.icons.COPY,
        icon_color=ft.colors.WHITE,
        tooltip='Copiar Dados',
        width=200,
        style=ft.ButtonStyle(
            bgcolor=ft.colors.BLUE_300,
            color=ft.colors.WHITE,
        ),
        on_click=copiar_para_area_de_transferencia  # Ação de copiar os dados
    )

    btn_limpar_dados = ft.TextButton(
        text='Limpar Dados',
        icon=ft.icons.DELETE_OUTLINE,
        icon_color=ft.colors.WHITE,
        tooltip='Limpar Dados',
        width=200,
        style=ft.ButtonStyle(
            bgcolor=ft.colors.RED,
            color=ft.colors.WHITE,
        ),
       on_click=lambda e: limpar_dados(e, origem_field, dados_tratados)  # Ação de limpar os dados
    )

    btn_tratar_dados = ft.TextButton(
        text='Tratar os Dados',
        icon=ft.icons.FORMAT_LIST_BULLETED,
        icon_color=ft.colors.WHITE,
        tooltip='Tratar Dados',
        width=200,
        style=ft.ButtonStyle(
            bgcolor=ft.colors.GREEN,
            color=ft.colors.WHITE,
        ),
        on_click=lambda e: tratar_dados(e, origem_field, dados_tratados)  # Ação de tratar os dados
    )
    
    # Adicionando os controles à página
    page.add(
        ft.Column(
            controls=[ 
                ft.Text("Organizador de Pix", size=30, weight=ft.FontWeight.BOLD, color=ft.colors.BLUE_600),
                ft.Divider(),
                ft.Container(
                    content=ft.Column(
                        controls=[
                            ft.Text('Dados Tratados', size=16, weight=ft.FontWeight.BOLD),
                            ft.Row([origem_field], alignment=ft.MainAxisAlignment.START),
                        ],
                        spacing=10
                    ),
                    padding=20,
                    border_radius=20,
                    bgcolor=ft.colors.GREY_50,
                    shadow=ft.BoxShadow(blur_radius=15, color=ft.colors.GREY_400)
                ),
            ]
        ),
        ft.Column(
            controls=[
                ft.Divider(),
                ft.Container(
                    content=ft.Column(
                        controls=[
                            ft.Text('Dados das Transações', size=16, weight=ft.FontWeight.BOLD),
                            dados_tratados,  # Exibe os dados tratados
                        ],
                        spacing=10,
                        expand=True,
                    ),
                    padding=20,
                    border_radius=20,
                    bgcolor=ft.colors.GREY_50,
                    shadow=ft.BoxShadow(blur_radius=15, color=ft.colors.GREY_400),
                    expand=True,
                ),
            ],
            expand=True,
        ),
        ft.Row([btn_tratar_dados, btn_limpar_dados, btn_copiar_dados ], alignment=ft.MainAxisAlignment.END)
    )

    page.update()

# Iniciar o app
ft.app(target=main)
